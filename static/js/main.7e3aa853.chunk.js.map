{"version":3,"sources":["components/User.js","components/TodoItems.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","name","TodoItems","react_default","a","createElement","id","components_User","item","complete","TodoList","newList","todos","map","el","user","users","find","userId","components_TodoItems","key","title","completed","className","onClick","sort","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","BASE_URL","wrap","_context","prev","next","fetch","concat","then","response","json","result","setState","allTodos","allUsers","stop","pushBtn","disable","timer","setTimeout","onLoadBtn","sortTable","state","b","localeCompare","clearTimeout","components_TodoList","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e3aa853.chunk.js","sourcesContent":["import React from 'react';\n\nfunction User(props) {\n    return (\n        props.name\n    )\n}\n\nexport default User;","import React from 'react';\nimport User from './User'\n\nfunction TodoItems(props) {\n    return (\n        <tr>\n            <td>{props.id}</td>\n            <td><User name={props.name}/></td>\n            <td>{props.item}</td>\n            <td>{props.complete} </td>\n        </tr>\n    );\n}\n\nexport default TodoItems;","import React from 'react';\nimport TodoItems from './TodoItems'\n\nfunction TodoList(props) {\n    let newList = props.todos.map(el => {\n        let user = props.users.find(user => {\n            return user.id === el.userId\n        });\n        return (\n            <TodoItems key={el.id}\n                       id={el.id}\n                       name={user.name}\n                       item={el.title}\n                       complete={el.completed ? 'completed' : 'not completed'}\n            />\n        )\n    });\n\n    return (\n        <table>\n            <tbody>\n            <tr className={'header'}>\n                <td>Id</td>\n                <td>Name</td>\n                <td onClick={props.sort} className=\"sorting\">Todos</td>\n                <td>Completed</td>\n            </tr>\n            {newList}\n            </tbody>\n        </table>\n    )\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList\"\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            onLoadBtn: false,\n            disable: false,\n            allTodos: [],\n            allUsers: []\n        }\n    }\n\n    componentDidMount = async () => {\n        const BASE_URL = 'https://jsonplaceholder.typicode.com';\n        fetch(`${BASE_URL}/todos`)\n            .then(response => response.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        allTodos: result\n                    });\n                });\n\n\n        fetch(`${BASE_URL}/users`)\n            .then(response => response.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        allUsers: result\n                    });\n                });\n    };\n\n    componentWillUnmount() {\n        clearTimeout(this.timer)\n    }\n\n    pushBtn = () => {\n        this.setState(prev => {\n            return {\n                disable: !prev.disable\n            }\n        });\n        this.timer = setTimeout(() => {\n            this.componentDidMount().then(this.setState({\n                onLoadBtn: true\n            }))\n        }, 600)\n    };\n\n    sortTable = () => {\n        this.setState({\n            allTodos: this.state.allTodos.sort((a, b) => a.title.localeCompare(b.title))\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"title\"> TODOS </h1>\n                {this.state.onLoadBtn\n                    ?\n                    <TodoList todos={this.state.allTodos} users={this.state.allUsers} sort={this.sortTable}/>\n                    :\n                    <button className='btn'\n                            onClick={this.pushBtn}\n                            disabled={this.state.disable}>\n                        {this.state.disable ? 'Loading...' : 'Load'}\n                    </button>\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
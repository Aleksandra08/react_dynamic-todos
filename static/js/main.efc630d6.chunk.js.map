{"version":3,"sources":["components/User.js","components/TodoItems.js","components/TodoList.js","App.js","api.js","serviceWorker.js","index.js"],"names":["User","props","name","TodoItems","react_default","a","createElement","id","components_User","item","complete","SORT_ORDER_COMPLETED","SORT_ORDER_TITLE","SORT_ORDER_USER","TodoList","newList","todos","map","el","user","users","find","userId","components_TodoItems","key","title","completed","className","onClick","sort","App","_direction","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pushBtn","setState","prev","disable","loadData","then","onLoadBtn","sortTable","sortField","_callbackMap","callbackMap","defineProperty","b","state","direction","localeCompare","allTodos","allUsers","handleSort","prevState","assign","Promise","all","fetch","res","json","items","todo","objectSpread","persons","_this$state","visibleTodos","components_TodoList","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efc630d6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction User(props) {\n    return (\n        props.name\n    )\n}\n\nexport default User;","import React from 'react';\nimport User from './User'\n\nfunction TodoItems(props) {\n\n    return (\n        <tr>\n            <td>{props.id}</td>\n            <td><User name={props.name}/></td>\n            <td>{props.item}</td>\n            <td>{props.complete} </td>\n        </tr>\n    );\n}\n\nexport default TodoItems;","import React from 'react';\nimport TodoItems from './TodoItems'\n\nexport const SORT_ORDER_COMPLETED = 'completed';\nexport const SORT_ORDER_TITLE = 'title';\nexport const SORT_ORDER_USER = 'user';\n\n\nfunction TodoList(props) {\n    let newList = props.todos.map(el => {\n        let user = props.users.find(user => {\n            return user.id === el.userId\n        });\n        return (\n            <TodoItems key={el.id}\n                       id={el.id}\n                       name={user.name}\n                       item={el.title}\n                       complete={el.completed ? 'completed' : 'not completed'}\n            />\n        )\n    });\n    return (\n        <table>\n            <tbody>\n            <tr className={'header'}>\n                <td>Id</td>\n                <td onClick={() => props.sort(SORT_ORDER_USER)} className=\"sorting\">Name</td>\n                <td onClick={() => props.sort(SORT_ORDER_TITLE)} className=\"sorting\">Todos</td>\n                <td onClick={() => props.sort(SORT_ORDER_COMPLETED)} className=\"sorting\">Completed</td>\n            </tr>\n            {newList}\n            </tbody>\n        </table>\n    )\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList,\n{\n    SORT_ORDER_COMPLETED,\n    SORT_ORDER_TITLE,\n    SORT_ORDER_USER,\n} from \"./components/TodoList\"\nimport {getUsers, getTodos} from './api';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            onLoadBtn: false,\n            disable: false,\n            allTodos: [],\n            allUsers: [],\n            sortField: SORT_ORDER_TITLE,\n            direction: {\n                [SORT_ORDER_COMPLETED]: \"asc\",\n                [SORT_ORDER_TITLE]: \"asc\",\n                [SORT_ORDER_USER]: \"asc\",\n            },\n        };\n\n        this.handleSort = (sortField) => {\n            this.setState(prevState => {\n                return {\n                    sortField,\n                    direction: Object.assign(prevState.direction, {\n                        [sortField]: prevState.direction[sortField] === \"asc\" ? \"desc\" : \"asc\"\n                    })\n                };\n            });\n        };\n    }\n\n    async loadData() {\n        const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n        const items = todos.map(todo => ({\n            ...todo,\n            user: users.find(user => user.id === todo.userId),\n        }));\n        const persons = users.map((user) => user);\n\n        this.setState({\n            allTodos: items,\n            allUsers: persons\n        });\n\n    };\n\n\n    pushBtn = () => {\n        this.setState(prev => {\n            return {\n                disable: !prev.disable\n            }\n        });\n        this.loadData().then(() => this.setState({\n            onLoadBtn: true\n        }))\n    };\n\n    sortTable = (todos, sortField) => {\n        const callbackMap = {\n            [SORT_ORDER_TITLE]: (a, b) => {\n                return this.state.direction[sortField] === 'asc'\n                    ? a.title.localeCompare(b.title)\n                    : b.title.localeCompare(a.title)\n            },\n            [SORT_ORDER_COMPLETED]: (a, b) => {\n                return this.state.direction[sortField] === \"asc\"\n                    ? a.completed - b.completed\n                    : b.completed - a.completed;\n            },\n            [SORT_ORDER_USER]: (a, b) => {\n                return this.state.direction[sortField] === \"asc\"\n                    ? a.user.name.localeCompare(b.user.name)\n                    : b.user.name.localeCompare(a.user.name);\n            },\n\n        };\n\n        return todos.sort(callbackMap[sortField]);\n    };\n\n    render() {\n        const {allTodos, allUsers, sortField, disable, onLoadBtn} = this.state;\n        const visibleTodos = this.sortTable(allTodos, sortField);\n\n        return (\n            <div>\n                <h1 className=\"title\"> TODOS </h1>\n                {onLoadBtn\n                    ? (\n                        <TodoList todos={visibleTodos}\n                                  users={allUsers}\n                                  sort={this.handleSort}\n                        />)\n                    : (\n                        <button className='btn'\n                                onClick={this.pushBtn}\n                                disabled={disable}>\n                            {disable ? 'Loading...' : 'Load'}\n                        </button>)\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","export const getTodos = () => {\n    return fetch('https://jsonplaceholder.typicode.com/todos')\n        .then(res => res.json());\n};\n\nexport const getUsers = () => {\n    return fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json());\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}